<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.dao.BookMapper">
  <resultMap id="BaseResultMap" type="com.example.demo.model.Book">
    <id column="book_id" jdbcType="INTEGER" property="bookId" />
    <result column="modified_date" jdbcType="DATE" property="modifiedDate" />
    <result column="ninety_book_enter_num" jdbcType="INTEGER" property="ninetyBookEnterNum" />
    <result column="book_title" jdbcType="VARCHAR" property="bookTitle" />
    <result column="series_id" jdbcType="INTEGER" property="seriesId" />
    <result column="book_intro" jdbcType="VARCHAR" property="bookIntro" />
    <result column="feature" jdbcType="VARCHAR" property="feature" />
    <result column="book_date" jdbcType="DATE" property="bookDate" />
    <result column="category_id" jdbcType="INTEGER" property="categoryId" />
    <result column="also_like_id" jdbcType="INTEGER" property="alsoLikeId" />
    <result column="image_link" jdbcType="VARCHAR" property="imageLink" />
    <result column="big_image_link" jdbcType="VARCHAR" property="bigImageLink" />
    <result column="label" jdbcType="VARCHAR" property="label" />
    <result column="book_vote" jdbcType="INTEGER" property="bookVote" />
    <result column="book_enter_num" jdbcType="INTEGER" property="bookEnterNum" />
    <result column="is_ebook" jdbcType="INTEGER" property="isEbook" />
    <result column="ebook_price" jdbcType="NUMERIC" property="ebookPrice" />
    <result column="paper_original_price" jdbcType="NUMERIC" property="paperOriginalPrice" />
    <result column="paper_sale_price" jdbcType="NUMERIC" property="paperSalePrice" />
    <result column="amazon_link" jdbcType="VARCHAR" property="amazonLink" />
    <result column="dangdang_link" jdbcType="VARCHAR" property="dangdangLink" />
    <result column="jd_link" jdbcType="VARCHAR" property="jdLink" />
    <result column="enable_gift" jdbcType="INTEGER" property="enableGift" />
    <result column="sample_download" jdbcType="VARCHAR" property="sampleDownload" />
    <result column="with_book_download" jdbcType="VARCHAR" property="withBookDownload" />
    <result column="first_grade_id" jdbcType="INTEGER" property="firstGradeId" />
    <result column="second_grade_id" jdbcType="INTEGER" property="secondGradeId" />
    <result column="third_grade_id" jdbcType="INTEGER" property="thirdGradeId" />
  </resultMap>
  <sql id="Base_Column_List">
    book_id, modified_date, ninety_book_enter_num, book_title, series_id, book_intro, feature, book_date, category_id, also_like_id,
    image_link, big_image_link, label, book_vote, book_enter_num, is_ebook, ebook_price, paper_original_price,
    paper_sale_price, amazon_link, dangdang_link, jd_link, enable_gift, sample_download, 
    with_book_download,first_grade_id,second_grade_id,third_grade_id
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_book
    where book_id = #{bookId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_book
    where book_id = #{bookId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.example.demo.model.Book">
    insert into t_book (book_id, modified_date, ninety_book_enter_num, book_title, series_id,
      book_intro, feature, book_date, 
      category_id, also_like_id, image_link, big_image_link,
      label, book_vote, book_enter_num, 
      is_ebook, ebook_price, paper_original_price, 
      paper_sale_price, amazon_link, dangdang_link, 
      jd_link, enable_gift, sample_download, 
      with_book_download,first_grade_id,second_grade_id,third_grade_id)
    values (#{bookId,jdbcType=INTEGER}, #{modifiedDate,jdbcType=DATE}, #{ninetyBookEnterNum,jdbcType=INTEGER}, #{bookTitle,jdbcType=VARCHAR}, #{seriesId,jdbcType=INTEGER},
      #{bookIntro,jdbcType=VARCHAR}, #{feature,jdbcType=VARCHAR}, #{bookDate,jdbcType=DATE}, 
      #{categoryId,jdbcType=INTEGER}, #{alsoLikeId,jdbcType=INTEGER}, #{imageLink,jdbcType=VARCHAR}, #{bigImageLink,jdbcType=VARCHAR},
      #{label,jdbcType=VARCHAR}, #{bookVote,jdbcType=INTEGER}, #{bookEnterNum,jdbcType=INTEGER}, 
      #{isEbook,jdbcType=INTEGER}, #{ebookPrice,jdbcType=NUMERIC}, #{paperOriginalPrice,jdbcType=NUMERIC}, 
      #{paperSalePrice,jdbcType=NUMERIC}, #{amazonLink,jdbcType=VARCHAR}, #{dangdangLink,jdbcType=VARCHAR}, 
      #{jdLink,jdbcType=VARCHAR}, #{enableGift,jdbcType=INTEGER}, #{sampleDownload,jdbcType=VARCHAR}, 
      #{withBookDownload,jdbcType=VARCHAR}, #{firstGradeId,jdbcType=INTEGER}, #{secondGradeId,jdbcType=INTEGER}, #{thirdGradeId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.example.demo.model.Book">
    insert into t_book
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="bookId != null">
        book_id,
      </if>
      <if test="modifiedDate != null">
        modified_date,
      </if>
      <if test="ninetyBookEnterNum != null">
        ninety_book_enter_num,
      </if>
      <if test="bookTitle != null">
        book_title,
      </if>
      <if test="seriesId != null">
        series_id,
      </if>
      <if test="bookIntro != null">
        book_intro,
      </if>
      <if test="feature != null">
        feature,
      </if>
      <if test="bookDate != null">
        book_date,
      </if>
      <if test="categoryId != null">
        category_id,
      </if>
      <if test="alsoLikeId != null">
        also_like_id,
      </if>
      <if test="imageLink != null">
        image_link,
      </if>
      <if test="bigImageLink != null">
        big_image_link,
      </if>
      <if test="label != null">
        label,
      </if>
      <if test="bookVote != null">
        book_vote,
      </if>
      <if test="bookEnterNum != null">
        book_enter_num,
      </if>
      <if test="isEbook != null">
        is_ebook,
      </if>
      <if test="ebookPrice != null">
        ebook_price,
      </if>
      <if test="paperOriginalPrice != null">
        paper_original_price,
      </if>
      <if test="paperSalePrice != null">
        paper_sale_price,
      </if>
      <if test="amazonLink != null">
        amazon_link,
      </if>
      <if test="dangdangLink != null">
        dangdang_link,
      </if>
      <if test="jdLink != null">
        jd_link,
      </if>
      <if test="enableGift != null">
        enable_gift,
      </if>
      <if test="sampleDownload != null">
        sample_download,
      </if>
      <if test="withBookDownload != null">
        with_book_download,
      </if>
      <if test="firstGradeId != null">
        first_grade_id,
      </if>
      <if test="secondGradeId != null">
        second_grade_id,
      </if>
      <if test="thirdGradeId != null">
        third_grade_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="bookId != null">
        #{bookId,jdbcType=INTEGER},
      </if>
      <if test="modifiedDate != null">
        #{modifiedDate,jdbcType=DATE},
      </if>
      <if test="ninetyBookEnterNum != null">
        #{ninetyBookEnterNum,jdbcType=INTEGER},
      </if>
      <if test="bookTitle != null">
        #{bookTitle,jdbcType=VARCHAR},
      </if>
      <if test="seriesId != null">
        #{seriesId,jdbcType=INTEGER},
      </if>
      <if test="bookIntro != null">
        #{bookIntro,jdbcType=VARCHAR},
      </if>
      <if test="feature != null">
        #{feature,jdbcType=VARCHAR},
      </if>
      <if test="bookDate != null">
        #{bookDate,jdbcType=DATE},
      </if>
      <if test="categoryId != null">
        #{categoryId,jdbcType=INTEGER},
      </if>
      <if test="alsoLikeId != null">
        #{alsoLikeId,jdbcType=INTEGER},
      </if>
      <if test="imageLink != null">
        #{imageLink,jdbcType=VARCHAR},
      </if>
      <if test="bigImageLink != null">
        #{bigImageLink,jdbcType=VARCHAR},
      </if>
      <if test="label != null">
        #{label,jdbcType=VARCHAR},
      </if>
      <if test="bookVote != null">
        #{bookVote,jdbcType=INTEGER},
      </if>
      <if test="bookEnterNum != null">
        #{bookEnterNum,jdbcType=INTEGER},
      </if>
      <if test="isEbook != null">
        #{isEbook,jdbcType=INTEGER},
      </if>
      <if test="ebookPrice != null">
        #{ebookPrice,jdbcType=NUMERIC},
      </if>
      <if test="paperOriginalPrice != null">
        #{paperOriginalPrice,jdbcType=NUMERIC},
      </if>
      <if test="paperSalePrice != null">
        #{paperSalePrice,jdbcType=NUMERIC},
      </if>
      <if test="amazonLink != null">
        #{amazonLink,jdbcType=VARCHAR},
      </if>
      <if test="dangdangLink != null">
        #{dangdangLink,jdbcType=VARCHAR},
      </if>
      <if test="jdLink != null">
        #{jdLink,jdbcType=VARCHAR},
      </if>
      <if test="enableGift != null">
        #{enableGift,jdbcType=INTEGER},
      </if>
      <if test="sampleDownload != null">
        #{sampleDownload,jdbcType=VARCHAR},
      </if>
      <if test="withBookDownload != null">
        #{withBookDownload,jdbcType=VARCHAR},
      </if>
      <if test="firstGradeId != null">
        #{firstGradeId,jdbcType=INTEGER},
      </if>
      <if test="secondGradeId != null">
        #{secondGradeId,jdbcType=INTEGER},
      </if>
      <if test="thirdGradeId != null">
        #{thirdGradeId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.demo.model.Book">
    update t_book
    <set>
      <if test="modifiedDate != null">
        modified_date = #{modifiedDate,jdbcType=DATE},
      </if>
      <if test="ninetyBookEnterNum != null">
        ninety_book_enter_num = #{ninetyBookEnterNum,jdbcType=INTEGER},
      </if>
      <if test="bookTitle != null">
        book_title = #{bookTitle,jdbcType=VARCHAR},
      </if>
      <if test="seriesId != null">
        series_id = #{seriesId,jdbcType=INTEGER},
      </if>
      <if test="bookIntro != null">
        book_intro = #{bookIntro,jdbcType=VARCHAR},
      </if>
      <if test="feature != null">
        feature = #{feature,jdbcType=VARCHAR},
      </if>
      <if test="bookDate != null">
        book_date = #{bookDate,jdbcType=DATE},
      </if>
      <if test="categoryId != null">
        category_id = #{categoryId,jdbcType=INTEGER},
      </if>
      <if test="alsoLikeId != null">
        also_like_id = #{alsoLikeId,jdbcType=INTEGER},
      </if>
      <if test="imageLink != null">
        image_link = #{imageLink,jdbcType=VARCHAR},
      </if>
      <if test="bigImageLink != null">
        big_image_link = #{bigImageLink,jdbcType=VARCHAR},
      </if>
      <if test="label != null">
        label = #{label,jdbcType=VARCHAR},
      </if>
      <if test="bookVote != null">
        book_vote = #{bookVote,jdbcType=INTEGER},
      </if>
      <if test="bookEnterNum != null">
        book_enter_num = #{bookEnterNum,jdbcType=INTEGER},
      </if>
      <if test="isEbook != null">
        is_ebook = #{isEbook,jdbcType=INTEGER},
      </if>
      <if test="ebookPrice != null">
        ebook_price = #{ebookPrice,jdbcType=NUMERIC},
      </if>
      <if test="paperOriginalPrice != null">
        paper_original_price = #{paperOriginalPrice,jdbcType=NUMERIC},
      </if>
      <if test="paperSalePrice != null">
        paper_sale_price = #{paperSalePrice,jdbcType=NUMERIC},
      </if>
      <if test="amazonLink != null">
        amazon_link = #{amazonLink,jdbcType=VARCHAR},
      </if>
      <if test="dangdangLink != null">
        dangdang_link = #{dangdangLink,jdbcType=VARCHAR},
      </if>
      <if test="jdLink != null">
        jd_link = #{jdLink,jdbcType=VARCHAR},
      </if>
      <if test="enableGift != null">
        enable_gift = #{enableGift,jdbcType=INTEGER},
      </if>
      <if test="sampleDownload != null">
        sample_download = #{sampleDownload,jdbcType=VARCHAR},
      </if>
      <if test="withBookDownload != null">
        with_book_download = #{withBookDownload,jdbcType=VARCHAR},
      </if>
      <if test="firstGradeId != null">
        first_grade_id = #{firstGradeId,jdbcType=INTEGER},
      </if>
      <if test="secondGradeId != null">
        second_grade_id = #{secondGradeId,jdbcType=INTEGER},
      </if>
      <if test="thirdGradeId != null">
        third_grade_id = #{thirdGradeId,jdbcType=INTEGER},
      </if>
    </set>
    where book_id = #{bookId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.demo.model.Book">
    update t_book
    set book_title = #{bookTitle,jdbcType=VARCHAR},
      modified_date = #{modifiedDate,jdbcType=DATE},
      ninety_book_enter_num = #{ninetyBookEnterNum,jdbcType=INTEGER},
      series_id = #{seriesId,jdbcType=INTEGER},
      book_intro = #{bookIntro,jdbcType=VARCHAR},
      feature = #{feature,jdbcType=VARCHAR},
      book_date = #{bookDate,jdbcType=DATE},
      category_id = #{categoryId,jdbcType=INTEGER},
      also_like_id = #{alsoLikeId,jdbcType=INTEGER},
      image_link = #{imageLink,jdbcType=VARCHAR},
      big_image_link = #{bigImageLink,jdbcType=VARCHAR},
      label = #{label,jdbcType=VARCHAR},
      book_vote = #{bookVote,jdbcType=INTEGER},
      book_enter_num = #{bookEnterNum,jdbcType=INTEGER},
      is_ebook = #{isEbook,jdbcType=INTEGER},
      ebook_price = #{ebookPrice,jdbcType=NUMERIC},
      paper_original_price = #{paperOriginalPrice,jdbcType=NUMERIC},
      paper_sale_price = #{paperSalePrice,jdbcType=NUMERIC},
      amazon_link = #{amazonLink,jdbcType=VARCHAR},
      dangdang_link = #{dangdangLink,jdbcType=VARCHAR},
      jd_link = #{jdLink,jdbcType=VARCHAR},
      enable_gift = #{enableGift,jdbcType=INTEGER},
      sample_download = #{sampleDownload,jdbcType=VARCHAR},
      with_book_download = #{withBookDownload,jdbcType=VARCHAR},
      first_grade_id = #{firstGradeId,jdbcType=INTEGER},
      second_grade_id = #{secondGradeId,jdbcType=INTEGER},
      third_grade_id = #{thirdGradeId,jdbcType=INTEGER}
    where book_id = #{bookId,jdbcType=INTEGER}
  </update>

  <resultMap id="BookWithSeriesResultMap" type="com.example.demo.extmodel.BookExt" extends="BaseResultMap">
    <association property="series" javaType="com.example.demo.model.Series">
      <id property="seriesId" column="series_id" />
      <result property="seriesName" column="series_name"/>
    </association>
  </resultMap>
  <resultMap id="BookWithCategoryResultMap" type="com.example.demo.extmodel.BookExt" extends="BaseResultMap">
    <association property="category" javaType="com.example.demo.model.Category">
      <id property="categoryId" column="category_id"/>
      <result property="categoryName" column="category_name"/>
    </association>
  </resultMap>
  <resultMap id="BookWithAlsoLikeResultMap" type="com.example.demo.extmodel.BookExt" extends="BaseResultMap">
    <association property="alsoLike" javaType="com.example.demo.model.AlsoLike">
      <id property="alsoLikeId" column="also_like_id"/>
      <result property="alsoLikeName" column="also_like_name"/>
    </association>
  </resultMap>

  <!-- 一对多 -->
  <resultMap id="BookWithCatalogResultMap" type="com.example.demo.extmodel.BookExt" extends="BaseResultMap">
    <collection property="catalogs" ofType="com.example.demo.model.Catalog">
      <id property="chapterId" column="chapter_id"/>
      <result property="chapterIntro" column="chapter_intro"/>
      <result property="chapterLink" column="chapter_link"/>
    </collection>
  </resultMap>

  <!-- 给多对多用-->
  <resultMap id="BookWithOriginalAuthorResultMap" type="com.example.demo.extmodel.BookExt" extends="BaseResultMap">
    <collection property="originalAuthors" ofType="com.example.demo.model.OriginalAuthor">
      <id property="originalAuthorId" column="original_author_id"/>
      <result property="authorName" column="author_name"/>
      <result property="originalAuthorIntro" column="original_author_intro"/>
    </collection>
  </resultMap>

  <!-- 给多对多用-->
  <resultMap id="BookWithTranslatorAuthorResultMap" type="com.example.demo.extmodel.BookExt" extends="BaseResultMap">
    <collection property="translatorAuthors" ofType="com.example.demo.model.TranslatorAuthor">
      <id property="translatorAuthorId" column="original_author_id"/>
      <result property="authorName" column="author_name"/>
      <result property="translatorAuthorIntro" column="translator_author_intro"/>
    </collection>
  </resultMap>

  <!-- 给多对多用-->
  <resultMap id="BookWithBooktagResultMap" type="com.example.demo.extmodel.BookExt" extends="BaseResultMap">
    <collection property="booktags" ofType="com.example.demo.model.Booktag">
      <id property="booktagId" column="booktag_id"/>
      <result property="booktagName" column="booktag_name"/>
    </collection>
  </resultMap>

  <!-- 给多对多用-->
  <resultMap id="BookWithOriginalAuthorTranslatorAuthorResultMap" type="com.example.demo.extmodel.BookExt" extends="BaseResultMap">
    <collection property="originalAuthors" ofType="com.example.demo.model.OriginalAuthor">
      <id property="originalAuthorId" column="original_author_id"/>
      <result property="authorName" column="original_author_name"/>
      <result property="originalAuthorIntro" column="original_author_intro"/>
    </collection>
    <collection property="translatorAuthors" ofType="com.example.demo.model.TranslatorAuthor">
      <id property="translatorAuthorId" column="translator_author_id"/>
      <result property="authorName" column="translator_author_name"/>
      <result property="translatorAuthorIntro" column="translator_author_intro"/>
    </collection>
  </resultMap>

  <sql id="Book_With_Original_Translator_Base_Column_List">
    b.book_id as book_id, modified_date, ninety_book_enter_num, book_title, series_id, book_intro, feature, book_date, category_id, also_like_id,
    image_link, big_image_link, label, book_vote, book_enter_num, is_ebook, ebook_price, paper_original_price,
    paper_sale_price, amazon_link, dangdang_link, jd_link, enable_gift, sample_download,
    with_book_download, first_grade_id, second_grade_id, third_grade_id, a.original_author_id as original_author_id, a.author_name as original_author_name, original_author_intro,
    aa.translator_author_id as translator_author_id, aa.author_name as translator_author_name, translator_author_intro
    from t_book as b left outer join t_book_original_author as m on b.book_id = m.book_id left outer join t_original_author as a on m.original_author_id = a.original_author_id
    left outer join t_book_translator_author as mm on b.book_id = mm.book_id left outer join t_translator_author as aa on mm.translator_author_id = aa.translator_author_id
  </sql>

  <select id="selectBookWithSeriesByPrimaryKey" parameterType="java.lang.Integer" resultMap="BookWithSeriesResultMap">
    select
    book_id, modified_date, ninety_book_enter_num, book_title, t_book.series_id as series_id, book_intro, feature, book_date, category_id, also_like_id,
    image_link, big_image_link, label, book_vote, book_enter_num, is_ebook, ebook_price, paper_original_price,
    paper_sale_price, amazon_link, dangdang_link, jd_link, enable_gift, sample_download,
    with_book_download, first_grade_id, second_grade_id, third_grade_id, series_name
    from t_book left outer join t_series on t_book.series_id = t_series.series_id
    where book_id = #{bookId,jdbcType=INTEGER}
  </select>
  <select id="selectBookWithCategoryByPrimaryKey" parameterType="java.lang.Integer" resultMap="BookWithCategoryResultMap">
    select
    book_id, modified_date, ninety_book_enter_num, book_title, series_id, book_intro, feature, book_date, t_book.category_id as category_id, also_like_id,
    image_link, big_image_link, label, book_vote, book_enter_num, is_ebook, ebook_price, paper_original_price,
    paper_sale_price, amazon_link, dangdang_link, jd_link, enable_gift, sample_download,
    with_book_download, first_grade_id, second_grade_id, third_grade_id, category_name
    from t_book left outer join t_category on t_book.category_id = t_category.category_id
    where book_id = #{bookId,jdbcType=INTEGER}
  </select>
  <select id="selectBookWithAlsoLikeByPrimaryKey" parameterType="java.lang.Integer" resultMap="BookWithAlsoLikeResultMap">
    select
    book_id, modified_date, ninety_book_enter_num, book_title, series_id, book_intro, feature, book_date, t_book.category_id, t_book.also_like_id as also_like_id,
    image_link, big_image_link, label, book_vote, book_enter_num, is_ebook, ebook_price, paper_original_price,
    paper_sale_price, amazon_link, dangdang_link, jd_link, enable_gift, sample_download,
    with_book_download, first_grade_id, second_grade_id, third_grade_id, also_like_name
    from t_book left outer join t_also_like on t_book.also_like_id = t_also_like.also_like_id
    where book_id = #{bookId,jdbcType=INTEGER}
  </select>

  <select id="selectBookWithCatalogByPrimaryKey" parameterType="java.lang.Integer" resultMap="BookWithCatalogResultMap">
    select
    t_book.book_id as book_id, modified_date, ninety_book_enter_num, book_title, series_id, book_intro, feature, book_date, category_id, also_like_id,
    image_link, big_image_link, label, book_vote, book_enter_num, is_ebook, ebook_price, paper_original_price,
    paper_sale_price, amazon_link, dangdang_link, jd_link, enable_gift, sample_download,
    with_book_download, first_grade_id, second_grade_id, third_grade_id, chapter_id, chapter_intro, chapter_link<!-- 引用其他mapper xml文件(命名空间)中的Base_Column_List-->
    from t_book left outer join t_catalog on t_book.book_id = t_catalog.book_id
    where t_book.book_id = #{bookId,jdbcType=INTEGER}
  </select><!-- 这里面多出了一个book_id没用到 -->

  <select id="selectBookWithOriginalAuthorByPrimaryKey" parameterType="java.lang.Integer" resultMap="BookWithOriginalAuthorResultMap">
    select
    b.book_id as book_id, modified_date, ninety_book_enter_num, book_title, series_id, book_intro, feature, book_date, category_id, also_like_id,
    image_link, big_image_link, label, book_vote, book_enter_num, is_ebook, ebook_price, paper_original_price,
    paper_sale_price, amazon_link, dangdang_link, jd_link, enable_gift, sample_download,
    with_book_download, first_grade_id, second_grade_id, third_grade_id, a.original_author_id as original_author_id, author_name, original_author_intro<!-- 引用其他mapper xml文件(命名空间)中的Base_Column_List-->
    from t_book as b left outer join t_book_original_author as m on b.book_id = m.book_id left outer join t_original_author as a on m.original_author_id = a.original_author_id
    where b.book_id = #{bookId,jdbcType=INTEGER}
  </select>

  <select id="selectBookWithTranslatorAuthorByPrimaryKey" parameterType="java.lang.Integer" resultMap="BookWithTranslatorAuthorResultMap">
    select
    b.book_id as book_id, modified_date, ninety_book_enter_num, book_title, series_id, book_intro, feature, book_date, category_id, also_like_id,
    image_link, big_image_link, label, book_vote, book_enter_num, is_ebook, ebook_price, paper_original_price,
    paper_sale_price, amazon_link, dangdang_link, jd_link, enable_gift, sample_download,
    with_book_download, first_grade_id, second_grade_id, third_grade_id, a.translator_author_id as translator_author_id, author_name, translator_author_intro<!-- 引用其他mapper xml文件(命名空间)中的Base_Column_List-->
    from t_book as b left outer join t_book_translator_author as m on b.book_id = m.book_id left outer join t_translator_author as a on m.translator_author_id = a.translator_author_id
    where b.book_id = #{bookId,jdbcType=INTEGER}
  </select>

  <select id="selectBookWithBooktagByPrimaryKey" parameterType="java.lang.Integer" resultMap="BookWithBooktagResultMap">
    select
    b.book_id as book_id, modified_date, ninety_book_enter_num, book_title, series_id, book_intro, feature, book_date, category_id, also_like_id,
    image_link, big_image_link, label, book_vote, book_enter_num, is_ebook, ebook_price, paper_original_price,
    paper_sale_price, amazon_link, dangdang_link, jd_link, enable_gift, sample_download,
    with_book_download, first_grade_id, second_grade_id, third_grade_id, a.booktag_id as booktag_id, booktag_name<!-- 引用其他mapper xml文件(命名空间)中的Base_Column_List-->
    from t_book as b left outer join t_book_booktag as m on b.book_id = m.book_id left outer join t_booktag as a on m.booktag_id = a.booktag_id
    where b.book_id = #{bookId,jdbcType=INTEGER}
  </select>

  <select id="selectBookWithOriginalTranslatorBySeriesId"  resultMap="BookWithOriginalAuthorTranslatorAuthorResultMap">
    select
    <include refid="Book_With_Original_Translator_Base_Column_List" />
   where b.series_id = #{arg0} and b.book_id &lt;&gt; #{arg1}
  </select>
  <select id="selectBookWithOriginalTranslatorByAlsoLikeId"  resultMap="BookWithOriginalAuthorTranslatorAuthorResultMap">
    select
    <include refid="Book_With_Original_Translator_Base_Column_List" />
    where b.also_like_id = #{arg0} and b.book_id &lt;&gt; #{arg1}
  </select>
  <select id="selectBookWithOriginalTranslatorByBooktagId"  resultMap="BookWithOriginalAuthorTranslatorAuthorResultMap">
    select
    b.book_id as book_id, modified_date, ninety_book_enter_num, book_title, series_id, book_intro, feature, book_date, category_id, also_like_id,
    image_link, big_image_link, label, book_vote, book_enter_num, is_ebook, ebook_price, paper_original_price,
    paper_sale_price, amazon_link, dangdang_link, jd_link, enable_gift, sample_download,
    with_book_download, first_grade_id, second_grade_id, third_grade_id, a.original_author_id as original_author_id, a.author_name as original_author_name, original_author_intro,
    aa.translator_author_id as translator_author_id, aa.author_name as translator_author_name, translator_author_intro
    from t_book_booktag as f left outer join t_book as b on f.book_id = b.book_id left outer join t_book_original_author as m on b.book_id = m.book_id left outer join t_original_author as a on m.original_author_id = a.original_author_id
    left outer join t_book_translator_author as mm on b.book_id = mm.book_id left outer join t_translator_author as aa on mm.translator_author_id = aa.translator_author_id
    where f.booktag_id = #{booktagId}
  </select>
  <select id="selectBookWithOriginalTranslatorOrderByBookEnterNum" parameterType="java.lang.Integer" resultMap="BookWithOriginalAuthorTranslatorAuthorResultMap">
select
b.book_id as book_id, modified_date, ninety_book_enter_num, book_title, series_id, book_intro, feature, book_date, category_id, also_like_id,
image_link, big_image_link, label, book_vote, book_enter_num, is_ebook, ebook_price, paper_original_price,
paper_sale_price, amazon_link, dangdang_link, jd_link, enable_gift, sample_download,
with_book_download, first_grade_id, second_grade_id, third_grade_id, a.original_author_id as original_author_id, a.author_name as original_author_name, original_author_intro,
aa.translator_author_id as translator_author_id, aa.author_name as translator_author_name, translator_author_intro
from (select * from t_book order by book_enter_num desc,book_id desc limit #{limit}) as b left outer join t_book_original_author as m on b.book_id = m.book_id left outer join t_original_author as a on m.original_author_id = a.original_author_id
left outer join t_book_translator_author as mm on b.book_id = mm.book_id left outer join t_translator_author as aa on mm.translator_author_id = aa.translator_author_id
order by b.book_enter_num desc,b.book_id desc
</select>
  <resultMap id="BookWithOriginalAuthorTranslatorAuthorResultMapSelect" type="com.example.demo.extmodel.BookExt" extends="BaseResultMap">
    <collection property="originalAuthors" column="book_id_for_original" ofType="com.example.demo.model.OriginalAuthor" select="com.example.demo.dao.OriginalAuthorMapper.selectByBookId" fetchType="lazy"/>
    <collection property="translatorAuthors" column="book_id_for_translator" ofType="com.example.demo.model.translatorAuthor" select="com.example.demo.dao.TranslatorAuthorMapper.selectByBookId" fetchType="lazy"/>
  </resultMap>
  <select id="selectBookWithOriginalTranslatorOrderByCondition2" parameterType="com.example.demo.model.Condition" resultMap="BookWithOriginalAuthorTranslatorAuthorResultMapSelect">
    select
    b.book_id as book_id, modified_date, ninety_book_enter_num, book_title, series_id, book_intro, feature, book_date, category_id, also_like_id,
    image_link, big_image_link, label, book_vote, book_enter_num, is_ebook, ebook_price, paper_original_price,
    paper_sale_price, amazon_link, dangdang_link, jd_link, enable_gift, sample_download,
    with_book_download, first_grade_id, second_grade_id, third_grade_id, b.book_id as book_id_for_original, b.book_id as book_id_for_translator
    from t_book as b
    <where>
      <if test="tabEbook != null">
        b.is_ebook= 1
      </if>
      <if test="tabFree !=null">
        and b.is_ebook= 1 and b.ebook_price=00.00
      </if>
      <if test="tabTranslator !=null">
        and b.label = '诚征译者'
      </if>
      <if test="tabSoon!=null">
        and b.label in ('正在编辑','正在排版')
      </if>
      <if test="ninetyVote != null">
        and b.modified_date &gt; #{date}
      </if>
      <if test="tabFav != null">
        and b.book_id in
        <foreach item="item" collection="favList" separator="," open="(" close=")" index="">
          #{item, jdbcType=INTEGER}
        </foreach>
      </if>
      <if test="grade1 != null">
        and b.first_grade_id = #{grade1}
      </if>
      <if test="grade2 != null">
        and b.second_grade_id = #{grade2}
      </if>
      <if test="grade3 != null">
        and b.third_grade_id = #{grade3}
      </if>
    </where>
    <if test="sortNew != null">
      order by b.book_date desc,b.book_id desc
    </if>
    <if test="sortHot != null">
      order by b.book_enter_num desc,b.book_id desc
    </if>
    <if test="sortVote != null">
      order by b.book_vote desc,b.book_id desc
    </if>
    <if test="ninetyVote != null">
      order by b.ninety_book_enter_num desc,b.book_id desc
    </if>
</select>
  <select id="selectBookWithOriginalTranslatorOrderByTag" parameterType="java.lang.Integer" resultMap="BookWithOriginalAuthorTranslatorAuthorResultMapSelect">
    select
    b.book_id as book_id, modified_date, ninety_book_enter_num, book_title, series_id, book_intro, feature, book_date, category_id, also_like_id,
    image_link, big_image_link, label, book_vote, book_enter_num, is_ebook, ebook_price, paper_original_price,
    paper_sale_price, amazon_link, dangdang_link, jd_link, enable_gift, sample_download,
    with_book_download, first_grade_id, second_grade_id, third_grade_id, b.book_id as book_id_for_original, b.book_id as book_id_for_translator
    from t_book_booktag as t
    left outer join t_book as b on t.book_id = b.book_id
    where t.booktag_id = #{booktagId}
  </select>
  <select id="selectBookWithOriginalTranslatorOrderByQuery" resultMap="BookWithOriginalAuthorTranslatorAuthorResultMapSelect">
    select
    b.book_id as book_id, modified_date, ninety_book_enter_num, book_title, series_id, book_intro, feature, book_date, category_id, also_like_id,
    image_link, big_image_link, label, book_vote, book_enter_num, is_ebook, ebook_price, paper_original_price,
    paper_sale_price, amazon_link, dangdang_link, jd_link, enable_gift, sample_download,
    with_book_download, first_grade_id, second_grade_id, third_grade_id, b.book_id as book_id_for_original, b.book_id as book_id_for_translator
    from t_book as b
    where b.book_title like #{query}
    union
        select
    b.book_id as book_id, modified_date, ninety_book_enter_num, book_title, series_id, book_intro, feature, book_date, category_id, also_like_id,
    image_link, big_image_link, label, book_vote, book_enter_num, is_ebook, ebook_price, paper_original_price,
    paper_sale_price, amazon_link, dangdang_link, jd_link, enable_gift, sample_download,
    with_book_download, first_grade_id, second_grade_id, third_grade_id, b.book_id as book_id_for_original, b.book_id as book_id_for_translator
    from t_booktag as t left outer join t_book_booktag as m on t.booktag_id = m.booktag_id
    left outer join t_book as b on m.book_id = b.book_id
    where t.booktag_name like #{query}
    union
            select
    b.book_id as book_id, modified_date, ninety_book_enter_num, book_title, series_id, book_intro, feature, book_date, category_id, also_like_id,
    image_link, big_image_link, label, book_vote, book_enter_num, is_ebook, ebook_price, paper_original_price,
    paper_sale_price, amazon_link, dangdang_link, jd_link, enable_gift, sample_download,
    with_book_download, first_grade_id, second_grade_id, third_grade_id, b.book_id as book_id_for_original, b.book_id as book_id_for_translator
    from t_original_author as t left outer join t_book_original_author as m on t.original_author_id = m.original_author_id
    left outer join t_book as b on m.book_id = b.book_id
    where t.author_name like #{query}
    union
                select
    b.book_id as book_id, modified_date, ninety_book_enter_num, book_title, series_id, book_intro, feature, book_date, category_id, also_like_id,
    image_link, big_image_link, label, book_vote, book_enter_num, is_ebook, ebook_price, paper_original_price,
    paper_sale_price, amazon_link, dangdang_link, jd_link, enable_gift, sample_download,
    with_book_download, first_grade_id, second_grade_id, third_grade_id, b.book_id as book_id_for_original, b.book_id as book_id_for_translator
    from t_translator_author as t left outer join t_book_translator_author as m on t.translator_author_id = m.translator_author_id
    left outer join t_book as b on m.book_id = b.book_id
    where t.author_name like #{query}
    union
                select
    b.book_id as book_id, modified_date, ninety_book_enter_num, book_title, b.series_id, book_intro, feature, book_date, category_id, also_like_id,
    image_link, big_image_link, label, book_vote, book_enter_num, is_ebook, ebook_price, paper_original_price,
    paper_sale_price, amazon_link, dangdang_link, jd_link, enable_gift, sample_download,
    with_book_download, first_grade_id, second_grade_id, third_grade_id, b.book_id as book_id_for_original, b.book_id as book_id_for_translator
    from t_series as t left outer join t_book as b on t.series_id=b.series_id
    where t.series_name like #{query}
  </select>
  <select id="selectBookWithOriginalTranslatorBySeriesId2"  resultMap="BookWithOriginalAuthorTranslatorAuthorResultMapSelect">
    select
    b.book_id as book_id, modified_date, ninety_book_enter_num, book_title, series_id, book_intro, feature, book_date, category_id, also_like_id,
    image_link, big_image_link, label, book_vote, book_enter_num, is_ebook, ebook_price, paper_original_price,
    paper_sale_price, amazon_link, dangdang_link, jd_link, enable_gift, sample_download,
    with_book_download, first_grade_id, second_grade_id, third_grade_id, b.book_id as book_id_for_original, b.book_id as book_id_for_translator
    from t_book as b
    where b.series_id = #{arg0} and b.book_id &lt;&gt; #{arg1}
  </select>

  <!--这个直接是中间表的内容-->
  <select id="isFavByPrimaryKey"  resultType="java.lang.Integer">
    select count(*) from t_fav_book_user as m where m.book_id=#{arg0} and m.user_id=#{arg1}
  </select>
  <select id="isVoteByPrimaryKey"  resultType="java.lang.Integer">
    select count(*) from t_vote_book_user as m where m.book_id=#{arg0} and m.user_id=#{arg1}
  </select>
  <select id="selectBookWithOriginalTranslatorByUserId"  resultMap="BookWithOriginalAuthorTranslatorAuthorResultMapSelect">
    select
    b.book_id as book_id, modified_date, ninety_book_enter_num, book_title, series_id, book_intro, feature, book_date, category_id, also_like_id,
    image_link, big_image_link, label, book_vote, book_enter_num, is_ebook, ebook_price, paper_original_price,
    paper_sale_price, amazon_link, dangdang_link, jd_link, enable_gift, sample_download,
    with_book_download, first_grade_id, second_grade_id, third_grade_id, b.book_id as book_id_for_original, b.book_id as book_id_for_translator
    from t_fav_book_user as t left outer join
    t_book as b on t.book_id = b.book_id
    where t.user_id = #{userId}
  </select>

  <!--实际上是中间表的内容-->
  <select id="selectBookIdByUserId" resultType="java.lang.Integer">
    select book_id from t_fav_book_user where user_id = #{userId}
  </select>
</mapper>