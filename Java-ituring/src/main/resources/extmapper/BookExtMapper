<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.dao.BookMapper">
    <resultMap id="BookWithSeriesResultMap" type="com.example.demo.extmodel.BookExt" extends="BaseResultMap">
        <association property="series" javaType="com.example.demo.model.Series">
            <id property="seriesId" column="series_id" />
            <result property="seriesName" column="series_name"/>
        </association>
    </resultMap>
    <resultMap id="BookWithCategoryResultMap" type="com.example.demo.extmodel.BookExt" extends="BaseResultMap">
        <association property="category" javaType="com.example.demo.model.Category">
            <id property="categoryId" column="category_id"/>
            <result property="categoryName" column="category_name"/>
        </association>
    </resultMap>
    <resultMap id="BookWithAlsoLikeResultMap" type="com.example.demo.extmodel.BookExt" extends="BaseResultMap">
        <association property="alsoLike" javaType="com.example.demo.model.AlsoLike">
            <id property="alsoLikeId" column="also_like_id"/>
            <result property="alsoLikeName" column="also_like_name"/>
        </association>
    </resultMap>

    <!-- 一对多 -->
    <resultMap id="BookWithCatalogResultMap" type="com.example.demo.extmodel.BookExt" extends="BaseResultMap">
        <collection property="catalogs" ofType="com.example.demo.model.Catalog">
            <id property="chapterId" column="chapter_id"/>
            <result property="chapterLink" column="chapter_link"/>
        </collection>
    </resultMap>

    <!-- 给多对多用-->
    <resultMap id="BookWithOriginalAuthorResultMap" type="com.example.demo.extmodel.BookExt" extends="BaseResultMap">
        <collection property="originalAuthors" ofType="com.example.demo.model.OriginalAuthor">
            <id property="originalAuthorId" column="original_author_id"/>
            <result property="authorName" column="author_name"/>
            <result property="originalAuthorIntro" column="original_author_intro"/>
        </collection>
    </resultMap>

    <!-- 给多对多用-->
    <resultMap id="BookWithTranslatorAuthorResultMap" type="com.example.demo.extmodel.BookExt" extends="BaseResultMap">
        <collection property="translatorAuthors" ofType="com.example.demo.model.TranslatorAuthor">
            <id property="translatorAuthorId" column="original_author_id"/>
            <result property="authorName" column="author_name"/>
            <result property="translatorAuthorIntro" column="translator_author_intro"/>
        </collection>
    </resultMap>

    <!-- 给多对多用-->
    <resultMap id="BookWithBooktagResultMap" type="com.example.demo.extmodel.BookExt" extends="BaseResultMap">
        <collection property="booktags" ofType="com.example.demo.model.Booktag">
            <id property="booktagId" column="booktag_id"/>
            <result property="booktagName" column="booktag_name"/>
        </collection>
    </resultMap>

    <!-- 一对一 --><!-- 从publishInfoMapper.xml那里赋值过来的-->
    <resultMap id="BookWithPublishInfoResultMap" type="com.example.demo.extmodel.BookExt" extends="BaseResultMap">
        <association property="publishInfo" javaType="com.example.demo.model.PublishInfo">
            <id column="publish_id" jdbcType="INTEGER" property="publishId" />
            <result column="book_title" jdbcType="VARCHAR" property="bookTitle" />
            <result column="series_name" jdbcType="VARCHAR" property="seriesName" />
            <result column="book_date" jdbcType="DATE" property="bookDate" />
            <result column="book_number" jdbcType="VARCHAR" property="bookNumber" />
            <result column="price" jdbcType="NUMERIC" property="price" />
            <result column="page_num" jdbcType="INTEGER" property="pageNum" />
            <result column="print" jdbcType="VARCHAR" property="print" />
            <result column="book_size" jdbcType="VARCHAR" property="bookSize" />
            <result column="book_status" jdbcType="VARCHAR" property="bookStatus" />
            <result column="original_title" jdbcType="VARCHAR" property="originalTitle" />
            <result column="original_book_number" jdbcType="VARCHAR" property="originalBookNumber" />
            <result column="amazon_link" jdbcType="VARCHAR" property="amazonLink" />
            <result column="question_contact" jdbcType="VARCHAR" property="questionContact" />
        </association>
    </resultMap>

    <sql id="Publish_Info_Base_Column_List">
        publish_id, book_title, series_name, book_date, book_number, price, page_num,
        print, book_size, book_status, original_title, original_book_number, amazon_link,
        question_contact
    </sql>

    <select id="selectBookWithSeriesByPrimaryKey" parameterType="java.lang.Integer" resultMap="BookWithSeriesResultMap">
        select
        <include refid="Base_Column_List"/>,series_name
        from t_book left outer join t_series on t_book.series_id = t_series.series_id
        where book_id = #{bookId,jdbcType=INTEGER}
    </select>
    <select id="selectBookWithCategoryByPrimaryKey" parameterType="java.lang.Integer" resultMap="BookWithCategoryResultMap">
        select
        <include refid="Base_Column_List"/>,category_name
        from t_book left outer join t_category on t_book.category_id = t_category.category_id
        where book_id = #{bookId,jdbcType=INTEGER}
    </select>
    <select id="selectBookWithAlsoLikeByPrimaryKey" parameterType="java.lang.Integer" resultMap="BookWithAlsoLikeResultMap">
        select
        <include refid="Base_Column_List"/>,also_like_name
        from t_book left outer join t_also_like on t_book.also_like_id = t_category.also_like_id
        where book_id = #{bookId,jdbcType=INTEGER}
    </select>

    <select id="selectBookWithCatalogByPrimaryKey" parameterType="java.lang.Integer" resultMap="BookWithCatalogResultMap">
        select
        <include refid="Base_Column_List"/>,<include refid="com.example.demo.dao.CatalogMapper.Base_Column_List"/><!-- 引用其他mapper xml文件(命名空间)中的Base_Column_List-->
        from t_book left outer join t_catalog on t_book.book_id = t_catalog.book_id
        where book_id = #{bookId,jdbcType=INTEGER}
    </select><!-- 这里面多出了一个book_id没用到 -->

    <select id="selectBookWithOriginalAuthorByPrimaryKey" parameterType="java.lang.Integer" resultMap="BookWithOriginalAuthorResultMap">
        select
        <include refid="Base_Column_List"/>,<include refid="com.example.demo.dao.OriginalAuthorMapper.Base_Column_List"/><!-- 引用其他mapper xml文件(命名空间)中的Base_Column_List-->
        from t_book as b left outer join t_book_original_author as m on b.book_id = m.book_id left outer join t_original_author as a on m.original_author_id = a.original_author_id
        where book_id = #{bookId,jdbcType=INTEGER}
    </select>

    <select id="selectBookWithTranslatorAuthorByPrimaryKey" parameterType="java.lang.Integer" resultMap="BookWithTranslatorAuthorResultMap">
        select
        <include refid="Base_Column_List"/>,<include refid="com.example.demo.dao.TranslatorAuthorMapper.Base_Column_List"/><!-- 引用其他mapper xml文件(命名空间)中的Base_Column_List-->
        from t_book as b left outer join t_book_translator_author as m on b.book_id = m.book_id left outer join t_translator_author as a on m.translator_author_id = a.translator_author_id
        where book_id = #{bookId,jdbcType=INTEGER}
    </select>

    <select id="selectBookWithBooktagByPrimaryKey" parameterType="java.lang.Integer" resultMap="BookWithBooktagResultMap">
        select
        <include refid="Base_Column_List"/>,<include refid="com.example.demo.dao.BooktagMapper.Base_Column_List"/><!-- 引用其他mapper xml文件(命名空间)中的Base_Column_List-->
        from t_book as b left outer join t_book_booktag as m on b.book_id = m.book_id left outer join t_booktag as a on m.booktag_id = a.booktag_id
        where book_id = #{bookId,jdbcType=INTEGER}
    </select>

    <select id="selectBookWithPublishInfoByPrimaryKey" parameterType="java.lang.Integer" resultMap="BookWithPublishInfoResultMap">
        select
        <include refid="Base_Column_List"/>,<include refid="Publish_Info_Base_Column_List"/>
        from t_book left outer join t_series on t_book.series_id = t_series.series_id
        where book_id = #{bookId,jdbcType=INTEGER}
    </select>
    <!-- 这样其实和业务层调用dao层方法 在service层用bookId查其他表 查处理的对象赋给Book类对象的实例变量差不多了 -->

    <!--自己一直没有查出来的列 多出来 也不让查出来的列 用在resultMap 中的两条 -->
</mapper>